{"version":3,"sources":["util/Converter.js","Components/InputBar/InputBar.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["numerals","Converter","romanToArabic","s","cur","curVal","next","nextVal","arr","split","total","i","length","arabicToRoman","num","isNaN","digits","String","key","roman","pop","Array","join","InputBar","props","state","term","handleTermChange","bind","handleArabicToRoman","handleRomanToArabic","event","newTerm","target","value","this","setState","preventDefault","className","placeholder","onChange","onClick","class","React","Component","App","display","val","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59af1d82.chunk.js","sourcesContent":["\nvar numerals = {\n    \"M\": 1000,\n    \"D\": 500,\n    \"C\": 100,\n    \"L\": 50,\n    \"X\": 10,\n    \"V\": 5,\n    \"I\": 1  \n};\n\n\nconst Converter = {\n    romanToArabic(s){\n        const arr = s.split('');\n    let total = 0;\n    let cur;\n    let curVal;\n    let next;\n    let nextVal;\n    for(let i = 0; i < arr.length; i ++){\n        if(!(arr[i] in numerals)){\n            return \"That's not a Roman numeral dumbass\";\n        }\n    }\n    for(let i = 0; i < arr.length; i ++){\n        cur = arr[i];\n        curVal = numerals[cur];\n        \n        next = arr[i + 1];\n        nextVal = numerals[next];\n        \n        if(curVal >= nextVal){\n            total += curVal;\n        } else if(curVal < nextVal){\n            total -= curVal;\n        } else if(curVal && !nextVal){\n            total += curVal;\n        }\n    }\n    \n    return total;\n    },\n    arabicToRoman(num){\n        if (isNaN(num))\n            return \"That's not a number dumbass\";\n        var digits = String(+num).split(\"\"),\n            key = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\",\n               \"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\",\n               \"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"],\n            roman = \"\",\n            i = 3;\n        while (i--)\n            roman = (key[+digits.pop() + (i * 10)] || \"\") + roman;\n        return Array(+digits.join(\"\") + 1).join(\"M\") + roman;\n    }\n}\n\nexport default Converter;","import React from 'react';\nimport './InputBar.css';\n\n\nclass InputBar extends React.Component {\n    constructor(props){ \n        super(props);\n        this.state = {\n            term: ''\n        };\n        this.handleTermChange = this.handleTermChange.bind(this); //bind methods to be able to use this\n        this.handleArabicToRoman = this.handleArabicToRoman.bind(this);\n        this.handleRomanToArabic = this.handleRomanToArabic.bind(this);\n    }\n\n    handleTermChange(event){ //term change handler\n        let newTerm = event.target.value;\n        this.setState({term: newTerm});\n    }\n\n    handleArabicToRoman(event){\n        this.props.arabicToRoman(this.state.term);\n        event.preventDefault();\n    }\n\n    handleRomanToArabic(event){\n        this.props.romanToArabic(this.state.term);\n        event.preventDefault();\n    }\n\n    render(){\n        return(\n            <div className = \"Inputbar\">\n                <div className = \"Inputbar-field\">\n                    <input placeholder=\"Put in roman numerals or arabic numerals\" onChange={this.handleTermChange} />\n                </div>\n                <div className=\"Inputbar-Conversion\">\n                    <a onClick={this.handleArabicToRoman}>Arabic to Roman</a>\n                    <div class=\"divider\"/>\n                    <a onClick={this.handleRomanToArabic}>Roman to Arabic</a>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default InputBar;","import React from 'react';\nimport './App.css';\nimport Converter from '../../util/Converter';\nimport InputBar from '../InputBar/InputBar';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      display: \"\"\n    }\n    this.arabicToRoman = this.arabicToRoman.bind(this);\n    this.romanToArabic = this.romanToArabic.bind(this);\n  }\n\n  arabicToRoman(s){\n    let val = Converter.arabicToRoman(s);\n    this.setState({display: val});\n  };\n\n  romanToArabic(s){\n    let val = Converter.romanToArabic(s);\n    this.setState({display: val});\n  };\n\n  render(){\n    return(\n      <div className=\"App\">\n        <h1>ROMAN TO ARABIC NUMERALS CONVERSION</h1>\n        <InputBar arabicToRoman={this.arabicToRoman} romanToArabic={this.romanToArabic} />\n        <h2>{this.state.display}</h2>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}