[{"/Users/stjohnlau/Desktop/web projects/roman-numerals/src/index.js":"1","/Users/stjohnlau/Desktop/web projects/roman-numerals/src/reportWebVitals.js":"2","/Users/stjohnlau/Desktop/web projects/roman-numerals/src/Components/App/App.js":"3","/Users/stjohnlau/Desktop/web projects/roman-numerals/src/Components/InputBar/InputBar.js":"4","/Users/stjohnlau/Desktop/web projects/roman-numerals/src/util/Converter.js":"5"},{"size":516,"mtime":1609289495600,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609284948841,"results":"8","hashOfConfig":"7"},{"size":861,"mtime":1609288991612,"results":"9","hashOfConfig":"7"},{"size":1439,"mtime":1609290945451,"results":"10","hashOfConfig":"7"},{"size":1408,"mtime":1609292875485,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1h922av",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/stjohnlau/Desktop/web projects/roman-numerals/src/index.js",[],["24","25"],"/Users/stjohnlau/Desktop/web projects/roman-numerals/src/reportWebVitals.js",[],"/Users/stjohnlau/Desktop/web projects/roman-numerals/src/Components/App/App.js",[],"/Users/stjohnlau/Desktop/web projects/roman-numerals/src/Components/InputBar/InputBar.js",["26","27"],"import React from 'react';\nimport './InputBar.css';\n\n\nclass InputBar extends React.Component {\n    constructor(props){ \n        super(props);\n        this.state = {\n            term: ''\n        };\n        this.handleTermChange = this.handleTermChange.bind(this); //bind methods to be able to use this\n        this.handleArabicToRoman = this.handleArabicToRoman.bind(this);\n        this.handleRomanToArabic = this.handleRomanToArabic.bind(this);\n    }\n\n    handleTermChange(event){ //term change handler\n        let newTerm = event.target.value;\n        this.setState({term: newTerm});\n    }\n\n    handleArabicToRoman(event){\n        this.props.arabicToRoman(this.state.term);\n        event.preventDefault();\n    }\n\n    handleRomanToArabic(event){\n        this.props.romanToArabic(this.state.term);\n        event.preventDefault();\n    }\n\n    render(){\n        return(\n            <div className = \"Inputbar\">\n                <div className = \"Inputbar-field\">\n                    <input placeholder=\"Put in roman numerals or arabic numerals\" onChange={this.handleTermChange} />\n                </div>\n                <div className=\"Inputbar-Conversion\">\n                    <a onClick={this.handleArabicToRoman}>Arabic to Roman</a>\n                    <div class=\"divider\"/>\n                    <a onClick={this.handleRomanToArabic}>Roman to Arabic</a>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default InputBar;","/Users/stjohnlau/Desktop/web projects/roman-numerals/src/util/Converter.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":38,"column":21,"nodeType":"34","endLine":38,"endColumn":59},{"ruleId":"32","severity":1,"message":"33","line":40,"column":21,"nodeType":"34","endLine":40,"endColumn":59},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]